Directory Tree:
ansible_bash/
    prepare_knowlege_base.py
    output.txt
    readme.md
inventory/
    hosts
playbooks/
    copy_execute_script.yml
roles/
    roles/execute_script/
        roles/execute_script/files/
            roles/execute_script/files/scripts/
                example_script.sh
        roles/execute_script/tasks/
            main.yml




# FILE: prepare_knowlege_base.py
###############################

import os
import argparse

# Function to print the directory tree using relative paths
def print_directory_tree(target_folder):
    tree = ""
    for root, dirs, files in os.walk(target_folder):
        # Get the relative path of the current directory
        relative_root = os.path.relpath(root, target_folder)
        if relative_root == ".":
            relative_root = os.path.basename(target_folder)
        
        # Print directories and files with relative paths
        level = relative_root.count(os.sep)
        indent = ' ' * 4 * level
        tree += f"{indent}{relative_root}/\n"
        sub_indent = ' ' * 4 * (level + 1)
        for f in files:
            tree += f"{sub_indent}{f}\n"
    return tree

# Function to recursively gather file contents using relative paths
def gather_files_contents(target_folder, output_file):
    with open(output_file, 'w') as combined_file:
        # Print directory tree at the top of the output file
        combined_file.write("Directory Tree:\n")
        combined_file.write(print_directory_tree(target_folder))
        combined_file.write("\n\n")

        for root, dirs, files in os.walk(target_folder):
            for file_name in files:
                # Get the relative file path
                file_path = os.path.relpath(os.path.join(root, file_name), target_folder)

                # Skip hidden files
                if file_name.startswith('.'):
                    continue
                
                # Write a header with the relative file path for clarity
                combined_file.write(f"\n\n# FILE: {file_path}\n")
                combined_file.write("#" * (len(file_path) + 7) + "\n\n")

                # Open and write the content of each file
                try:
                    with open(os.path.join(root, file_name), 'r') as file:
                        combined_file.write(file.read())
                        combined_file.write("\n\n")
                except Exception as e:
                    print(f"Error reading {file_path}: {e}")
                    continue

if __name__ == "__main__":
    # Set up argument parsing for command-line usage
    parser = argparse.ArgumentParser(description="Gather all files in a folder recursively and combine their contents into a single file.")
    parser.add_argument("target_folder", nargs='?', default=os.getcwd(), help="Path to the target folder where files are located. Defaults to the current directory.")
    parser.add_argument("output_file", nargs='?', default="output.txt", help="Path to the output file where contents will be saved. Defaults to 'output.txt'.")
    
    args = parser.parse_args()

    # Ensure the target folder exists
    if not os.path.exists(args.target_folder):
        print(f"Error: The folder '{args.target_folder}' does not exist.")
        exit(1)
    
    # Run the function to gather file contents
    gather_files_contents(args.target_folder, args.output_file)
    
    print(f"Combined contents of all files from '{args.target_folder}' into '{args.output_file}'.")




# FILE: output.txt
#################





# FILE: readme.md
################

## Key Components:
1. scripts/: This folder will store all your Bash scripts.
    - Example: example_script.sh
2. `ansible/playbooks/copy_execute_script.yml`: The Ansible playbook responsible for copying and executing the Bash script on target hosts.
3. `ansible/inventory/hosts`: Inventory file listing your target hosts (e.g., [webservers]).
4. `ansible/roles/execute_script/tasks/main.yml`: This file defines the task to copy and execute the script on the remote host.
5. `ansible/roles/execute_script/files/scripts/`: This folder contains scripts that Ansible will copy to the target host.


## prepare_knowledge_base.py
Python script that will recursively gather all the files in a target folder and add their contents to a single file, which you can then upload into a custom ChatGPT instance to serve as the knowledge base. It will also add to the top of the output the file structure to better give context to the gpt. 



# FILE: inventory/hosts
######################





# FILE: playbooks/copy_execute_script.yml
########################################

---
- name: Copy and execute Bash script on target hosts
  hosts: all
  become: true
  vars:
    script_name: "example_script.sh"
    script_args: ""  # Optional, pass script parameters here.
    target_path: "/tmp"

  roles:
    - execute_script




# FILE: roles/execute_script/files/scripts/example_script.sh
###########################################################

#!/bin/bash
echo "Script is running with arguments: $@"




# FILE: roles/execute_script/tasks/main.yml
##########################################

---
- name: Copy script to target host
  copy:
    src: "files/scripts/{{ script_name }}"
    dest: "{{ target_path }}/{{ script_name }}"
    mode: '0755'

- name: Execute the script with parameters
  shell: "{{ target_path }}/{{ script_name }} {{ script_args }}"
  register: script_output

- name: Show script output
  debug:
    var: script_output.stdout


