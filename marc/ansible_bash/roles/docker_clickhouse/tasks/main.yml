---
- name: Debug variables
  debug:
    msg: "Host: {{ inventory_hostname }} | Node Number: {{ hostvars[inventory_hostname]['node_number'] }} | SSL Cert Common Name: {{ hostvars[inventory_hostname]['ssl_cert_common_name'] }}"

- name: Create directories for ClickHouse
  file:
    path: "{{ item }}"
    state: directory
    owner: "clickhouse"
    group: "clickhouse"
    mode: '0755'
  loop: 
    - "{{ clickhouse_config_dir }}"
    - "{{ clickhouse_users_dir }}"
    - "{{ clickhouse_init_dir }}"
    - "{{ clickhouse_logs_dir }}"
    - "{{ clickhouse_data_dir }}"
  tags:
    - config

- name: Clickhouse Config files
  vars:
    clickhouse_dynamic_files:
      - { src: 'cluster.xml.j2', dest: '{{ clickhouse_config_dir }}/cluster.xml' }
      - { src: 'ssl.xml.j2', dest: '{{ clickhouse_config_dir }}/ssl.xml' }
      - { src: 'macros.xml.j2', dest: '{{ clickhouse_config_dir }}/macros.xml' }
      - { src: 'network.xml.j2', dest: '{{ clickhouse_config_dir }}/network.xml' }
      - { src: 'other_db_customizations.xml.j2', dest: '{{ clickhouse_config_dir }}/other_db_customizations.xml' }
      - { src: 'users.xml.j2', dest: '{{ clickhouse_users_dir }}/users.xml' }
    clickhouse_static_files:
      - { src: 'airbyte_user.sql', dest: '{{ clickhouse_init_dir }}/airbyte_user.sql' }
      - { src: 'create_databases.sql', dest: '{{ clickhouse_init_dir }}/create_databases.sql' }
      - { src: 'create_user_roles.sql', dest: '{{ clickhouse_init_dir }}/create_user_roles.sql' }
      - { src: 'create_users.sql', dest: '{{ clickhouse_init_dir }}/create_users.sql' }
      # - { src: 'query_log_copier_starter.sh', dest: '{{ clickhouse_init_dir }}/query_log_copier_starter.sh' }
      - { src: 'query_log_copier.sh', dest: '{{ gdw_dir }}/query_log_copier.sh' }
    all_clickhouse_files: "{{ clickhouse_dynamic_files + clickhouse_static_files }}"
  block: 
  - name: Upload dynamic ClickHouse configuration files
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: true
      owner: clickhouse
      group: clickhouse
      mode: '0644'
    loop: "{{ clickhouse_dynamic_files }}"
  
  - name: Upload static Clickhouse configuration files
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: true
      owner: clickhouse
      group: clickhouse
      mode: '0644'
    loop: "{{ clickhouse_static_files }}"
  tags:
    - copy
    - config

- name: Verify required directories exist on the remote host
  stat:
    path: "{{ item.path }}"
  register: dir_check
  loop:
    - { path: "{{ clickhouse_config_dir }}", error_message: "clickhouse_config_dir does not exist on the remote host." }
    - { path: "{{ remote_certs_dir }}", error_message: "remote_certs_dir does not exist on the remote host." }
    - { path: "{{ clickhouse_logs_dir }}", error_message: "clickhouse_logs_dir does not exist on the remote host." }
    - { path: "{{ clickhouse_data_dir }}", error_message: "clickhouse_data_dir does not exist on the remote host." }
    - { path: "{{ clickhouse_init_dir }}", error_message: "clickhouse_init_dir does not exist on the remote host." }
    - { path: "{{ gdw_dir }}", error_message: "gdw_dir does not exist on the remote host." }
    - { path: "{{ gdw_dir }}/certs", error_message: "gdw_dir/certs does not exist on the remote host." }
  failed_when: dir_check.stat.exists == false
  when: item.path != ""

- name: Task Group - Docker Download, transfer, and upload
  block:
    - name: Check if the Docker image exists on the remote host
      shell: "docker images -q clickhouse/clickhouse-server:{{ clickhouse_version }}"
      register: image_exists
      changed_when: false

    - name: Check if Docker image tar file exists on the remote host
      stat:
        path: /tmp/clickhouse-server.tar
      register: image_tar_exists

    - name: Pull the Docker image on the local machine if it's not present on the remote host
      docker_image:
        name: clickhouse/clickhouse-server
        tag: "{{ clickhouse_version }}"
        source: pull
      delegate_to: localhost
      when: image_exists.stdout == ""

    - name: Save Docker image to a tar file locally
      command: "docker save -o /tmp/clickhouse-server.tar clickhouse/clickhouse-server:{{ clickhouse_version }}"
      delegate_to: localhost
      when: image_exists.stdout == ""

    - name: Transfer the Docker image tar file to the remote host
      copy:
        src: /tmp/clickhouse-server.tar
        dest: /tmp/clickhouse-server.tar
      when: image_exists.stdout == "" and not image_tar_exists.stat.exists

    - name: Load Docker image on the remote host from the tar file
      command: docker load -i /tmp/clickhouse-server.tar
      when: image_exists.stdout == "" and not image_tar_exists.stat.exists

    - name: Ensure the Docker image is present on the remote host
      docker_image:
        name: clickhouse/clickhouse-server
        tag: "{{ clickhouse_version }}"
        source: load
      when: image_exists.stdout == ""
  tags:
    - docker
    - image

- name: Start ClickHouse Docker container with configuration and certificates
  block:

    - name: Remove existing ClickHouse container if running
      docker_container:
        name: "{{ clickhouse_container_name }}"
        state: absent
      tags:
        - remove

    - name: Copy Dockerfile to remote server
      template:
        src: Dockerfile.clickhouse.j2
        dest: "{{ gdw_dir }}/DockerFile.clickhouse"

    - name: Remove Docker Compose file on remote server
      file:
        path: "{{ gdw_dir }}/docker-compose-clickhouse.yml"
        state: absent
      tags:
        - remove

    - name: Copy Docker Compose file to remote server
      template:
        src: docker-compose-clickhouse.yml.j2
        dest: "{{ gdw_dir }}//docker-compose-clickhouse.yml"

    - name: Start Clickhouse container using Docker Compose
      command: docker compose -f {{ gdw_dir }}/docker-compose-clickhouse.yml up -d
  tags:
    - docker

