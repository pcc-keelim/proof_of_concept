---
      
- name: generate SAN_LIST
  block:
    - name: gather FQDN of the server
      command: hostname -f
      register: fqdn_output
    - name: Gather primary IP address of the server
      command: hostname -I
      register: ip_output

    - name: Gather all IP addresses assigned to the server
      shell: ip -o -4 addr show | awk '{print $4}' | cut -d/ -f1
      register: all_ips_output

    - name: Prepare SAN_LIST by combining FQDN and IP addresses
      set_fact:
        san_list: "{{ fqdn_output.stdout }},{{ ip_output.stdout.split()[0] }},{{ all_ips_output.stdout_lines | join(',') }}"
    
    - name: Remove duplicate entries from SAN_LIST
      set_fact:
        san_list: "{{ san_list.split(',') | unique | join(',') }}"
    
    - name: Display the SAN_LIST for debugging
      debug:
        msg: "SAN_LIST is {{ san_list }}"

- name: Configure Local Certificate Authority
  block:
    - name: Create directory for generated certificates locally
      become: false
      local_action:
        module: file
        path: "{{ cert_storage_path }}"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Generate Certificate Authority (CA) if not present with certificate_management.py
      become: false
      local_action: command python3 /home/marckeelingiv/dev/proof_of_concept/marc/py_ca/certificate_management.py
      environment:
        # CA_PASSPHRASE: "{{ ca_passphrase }}"
        REQUEST_TYPE: "generate_ca"
        CA_STORAGE_PATH: "{{ cert_storage_path }}/ca"
        CA_VALIDITY_YEARS: "2"
        CA_ORG_NAME: "{{ ca_org_name }}"
        CA_STATE: "{{ ca_state }}"
      delegate_to: localhost

    - name: Generate server certificate with certificate_management.py
      become: false
      local_action: command python3 /home/marckeelingiv/dev/proof_of_concept/marc/py_ca/certificate_management.py
      environment:
        # CA_PASSPHRASE: "{{ ca_passphrase }}"
        REQUEST_TYPE: "generate_server_cert"
        CA_STORAGE_PATH: "{{ cert_storage_path }}/ca"
        CERT_TYPE: "server"
        CERT_NAME: "{{ ssl_cert_common_name }}"
        CERT_VALIDITY_DAYS: "365"
        CA_ORG_NAME: "{{ ca_org_name }}"
        CA_STATE: "{{ ca_state }}"
        SAN_LIST: "{{ san_list }}"
      delegate_to: localhost

  tags: 
    - ca

- name: Copy generated certificates to the remote server
  vars:
    cert_type: "server"
    local_cert_base_path: "{{ cert_storage_path }}/ca/certificates/{{ cert_type }}_{{ ssl_cert_common_name }}"
    file_name: "{{ ssl_cert_common_name }}"
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    force: true
  loop:
    - src: "{{ local_cert_base_path }}/{{ file_name }}.cert.pem"
      dest: "{{ remote_certs_dir }}/{{ file_name }}.cert.pem"
      mode: '0644'
    - src: "{{ local_cert_base_path }}/{{ file_name }}.key.pem"
      dest: "{{ remote_certs_dir }}/{{ file_name }}.key.pem"
      mode: '0600'
    - src: "{{ cert_storage_path }}/ca/ca.cert.pem"
      dest: "{{ remote_certs_dir }}/ca.cert.pem"
      mode: '0644'
  tags:
    - copy

- name: Set the owner and group of the certificate files to clickhouse:clickhouse
  file:
    path: "{{ item.dest }}"
    owner: "clickhouse"
    group: "clickhouse"
    recurse: no
  loop:
    - { dest: "{{ remote_certs_dir }}/{{ ssl_cert_common_name }}.cert.pem" }
    - { dest: "{{ remote_certs_dir }}/{{ ssl_cert_common_name }}.key.pem" }
    - { dest: "{{ remote_certs_dir }}/ca.cert.pem" }
  tags:
    - permissions

- name: Create directories for ClickHouse
  file:
    path: "{{ item }}"
    state: directory
    owner: "clickhouse"
    group: "clickhouse"
    mode: '0755'
  loop: 
    - "{{ clickhouse_config_dir }}"
    - "{{ clickhouse_users_dir }}"
    - "{{ clickhouse_init_dir }}"
    - "{{ clickhouse_logs_dir }}"
  tags:
    - config

- name: Clickhouse Config files
  vars:
    clickhouse_template_files:
      - { src: 'cluster.xml.j2', dest: '{{ clickhouse_config_dir }}/cluster.xml' }
      - { src: 'ssl.xml.j2', dest: '{{ clickhouse_config_dir }}/ssl.xml' }
      # - { src: 'macros.xml.j2', dest: '{{ clickhouse_config_dir }}/macros.xml' }
      - { src: 'network.xml.j2', dest: '{{ clickhouse_config_dir }}/network.xml' }
      - { src: 'other_db_customizations.xml.j2', dest: '{{ clickhouse_config_dir }}/other_db_customizations.xml' }
      - { src: 'users.xml.j2', dest: '{{ clickhouse_users_dir }}/users.xml' }
    clickhouse_static_files:
      - { src: 'airbyte_user.sql', dest: '{{ clickhouse_init_dir }}/airbyte_user.sql' }
      - { src: 'create_databases.sql', dest: '{{ clickhouse_init_dir }}/create_databases.sql' }
      - { src: 'create_user_roles.sql', dest: '{{ clickhouse_init_dir }}/create_user_roles.sql' }
      - { src: 'create_users.sql', dest: '{{ clickhouse_init_dir }}/create_users.sql' }
      # - { src: 'query_log_copier_starter.sh', dest: '{{ clickhouse_init_dir }}/query_log_copier_starter.sh' }
      - { src: 'query_log_copier.sh', dest: '{{ gdw_dir }}/query_log_copier.sh' }
    all_clickhouse_files: "{{ clickhouse_template_files + clickhouse_static_files }}"
  block: 
  - name: Upload primary ClickHouse configuration templates
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: true
      owner: clickhouse
      group: clickhouse
      mode: '0644'
    loop: "{{ clickhouse_template_files }}"
  
  - name: Upload primary Clickhouse configuration files
    copy:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: true
      owner: clickhouse
      group: clickhouse
      mode: '0644'
    loop: "{{ clickhouse_static_files }}"
  tags:
    - copy
    - config

- name: Verify required directories exist on the remote host
  stat:
    path: "{{ item.path }}"
  register: dir_check
  loop:
    - { path: "{{ clickhouse_config_dir }}", error_message: "clickhouse_config_dir does not exist on the remote host." }
    - { path: "{{ remote_certs_dir }}", error_message: "remote_certs_dir does not exist on the remote host." }
    - { path: "{{ clickhouse_logs_dir }}", error_message: "clickhouse_logs_dir does not exist on the remote host." }
    - { path: "{{ clickhouse_init_dir }}", error_message: "clickhouse_init_dir does not exist on the remote host." }
    - { path: "{{ gdw_dir }}", error_message: "gdw_dir does not exist on the remote host." }
    - { path: "{{ gdw_dir }}/certs", error_message: "gdw_dir/certs does not exist on the remote host." }
  failed_when: dir_check.stat.exists == false
  when: item.path != ""

- name: Task Group - Docker Download, transfer, and upload
  block:
    - name: Check if the Docker image exists on the remote host
      shell: docker images -q clickhouse/clickhouse-server:23.10.5.20
      register: image_exists
      changed_when: false

    - name: Check if Docker image tar file exists on the remote host
      stat:
        path: /tmp/clickhouse-server.tar
      register: image_tar_exists

    - name: Pull the Docker image on the local machine if it's not present on the remote host
      docker_image:
        name: clickhouse/clickhouse-server
        tag: 23.10.5.20
        source: pull
      delegate_to: localhost
      when: image_exists.stdout == ""

    - name: Save Docker image to a tar file locally
      command: docker save -o /tmp/clickhouse-server.tar clickhouse/clickhouse-server:23.10.5.20
      delegate_to: localhost
      when: image_exists.stdout == ""

    - name: Transfer the Docker image tar file to the remote host
      copy:
        src: /tmp/clickhouse-server.tar
        dest: /tmp/clickhouse-server.tar
      when: image_exists.stdout == "" and not image_tar_exists.stat.exists

    - name: Load Docker image on the remote host from the tar file
      command: docker load -i /tmp/clickhouse-server.tar
      when: image_exists.stdout == "" and not image_tar_exists.stat.exists

    - name: Ensure the Docker image is present on the remote host
      docker_image:
        name: clickhouse/clickhouse-server
        tag: 23.10.5.20
        source: load
      when: image_exists.stdout == ""
  tags:
    - docker
    - image

- name: Start ClickHouse Docker container with configuration and certificates
  block:

    - name: Remove existing ClickHouse container if running
      docker_container:
        name: "{{ clickhouse_container_name }}"
        state: absent
      tags:
        - remove

    - name: Copy Dockerfile to remote server
      template:
        src: Dockerfile.clickhouse.j2
        dest: "{{ gdw_dir }}/DockerFile.clickhouse"

    - name: Remove Docker Compose file on remote server
      file:
        path: "{{ gdw_dir }}/docker-compose-clickhouse.yml"
        state: absent
      tags:
        - remove

    - name: Copy Docker Compose file to remote server
      template:
        src: docker-compose-clickhouse.yml.j2
        dest: "{{ gdw_dir }}//docker-compose-clickhouse.yml"

    - name: Start Clickhouse container using Docker Compose
      command: docker compose -f {{ gdw_dir }}/docker-compose-clickhouse.yml up -d
  tags:
    - docker



