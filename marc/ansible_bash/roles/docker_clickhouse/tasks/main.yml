---
- name: Configure Local Certificate Authority
  block:
    - name: Create directory for generated certificates locally
      local_action:
        module: file
        path: "{{ cert_storage_path }}"
        state: directory
        mode: '0755'
      delegate_to: localhost
      become: false

    - name: Generate certificate Authority if not exists certificate_management.py
      become: false
      local_action: command python3 /home/marckeelingiv/dev/proof_of_concept/marc/py_ca/certificate_management.py {{ cert_storage_path }}
      environment:
        # CA_PASSPHRASE: "{{ ca_passphrase }}"
        CERT_TYPE: "ca"
        CERT_NAME: "{{ ssl_cert_common_name }}"
        VALIDITY_DAYS: "365"
        ORG_NAME: "{{ org_name }}"
        STATE: "{{ state }}"
        SAN_LIST: "{{ san_list }}"
        GENERATE_CERTIFICATE: "false"
      delegate_to: localhost
      
- name: generate SAN_LIST
  block:
    - name: gather FQDN of the server
      command: hostname -f
      register: fqdn_output
    - name: Gather primary IP address of the server
      command: hostname -I
      register: ip_output

    - name: Gather all IP addresses assigned to the server
      shell: ip -o -4 addr show | awk '{print $4}' | cut -d/ -f1
      register: all_ips_output

    - name: Prepare SAN_LIST by combining FQDN and IP addresses
      set_fact:
        san_list: "{{ fqdn_output.stdout }},{{ ip_output.stdout.split()[0] }},{{ all_ips_output.stdout_lines | join(',') }}"
    
    - name: Remove duplicate entries from SAN_LIST
      set_fact:
        san_list: "{{ san_list.split(',') | unique | join(',') }}"
    
    - name: Display the SAN_LIST for debugging
      debug:
        msg: "SAN_LIST is {{ san_list }}"

    - name: Execute Python script with the SAN_LIST
      command: python3 /home/marckeelingiv/dev/proof_of_concept/marc/py_ca/certificate_management.py {{ cert_storage_path }}
      environment:
        # CA_PASSPHRASE: "{{ ca_passphrase }}"
        CERT_TYPE: "server"
        CERT_NAME: "{{ ssl_cert_common_name }}"
        VALIDITY_DAYS: "365"
        ORG_NAME: "{{ org_name }}"
        STATE: "{{ state }}"
        SAN_LIST: "{{ san_list }}"
        GENERATE_CERTIFICATE: "true"
      delegate_to: localhost
      register: python_script_output
      become: false

    - name: Show python script output
      debug:
        var: python_script_output

- name: Copy generated certificates to the remote server
  vars:
    local_cert_base_path: "{{ cert_storage_path }}/{{ ssl_cert_common_name }}"
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop:
    - src: "{{ local_cert_base_path }}/{{ ssl_cert_common_name }}.cert.pem"
      dest: "{{ remote_certs_dir }}/{{ ssl_cert_common_name }}.cert.pem"
      mode: '0644'
    - src: "{{ local_cert_base_path }}/{{ ssl_cert_common_name }}.key.pem"
      dest: "{{ remote_certs_dir }}/{{ ssl_cert_common_name }}.key.pem"
      mode: '0600'
    - src: "{{ cert_storage_path }}/ca/ca.cert.pem"
      dest: "{{ remote_certs_dir }}/ca.cert.pem"
      mode: '0644'
  tags:
    - copy

- name: Set the owner and group of the certificate files to clickhouse:clickhouse
  file:
    path: "{{ item.dest }}"
    owner: "clickhouse"
    group: "clickhouse"
    recurse: no
  loop:
    - { dest: "{{ remote_certs_dir }}/{{ ssl_cert_common_name }}.cert.pem" }
    - { dest: "{{ remote_certs_dir }}/{{ ssl_cert_common_name }}.key.pem" }
    - { dest: "{{ remote_certs_dir }}/ca.cert.pem" }
  tags:
    - permissions

- name: Create configuration directory for ClickHouse
  file:
    path: "{{ clickhouse_config_dir }}"
    state: directory
    owner: "clickhouse"
    group: "clickhouse"
    mode: '0755'
  tags:
    - config

- name: Remove existing ClickHouse configuration files
  file:
    path: "{{ clickhouse_config_dir }}/{{ item.dest }}"
    state: absent
  loop:
    - { dest: 'cluster.xml' }
    - { dest: 'ssl.xml' }
    - { dest: 'docker_related_config.xml' }
    - { dest: 'network.xml' }
  tags:
    - config

- name: Upload primary ClickHouse configuration templates
  template:
    src: "{{ item.src }}"
    dest: "{{ clickhouse_config_dir }}/{{ item.dest }}"
    owner: clickhouse
    group: clickhouse
    mode: '0644'
  loop:
    - { src: 'cluster.xml.j2', dest: 'cluster.xml' }
    - { src: 'ssl.xml.j2', dest: 'ssl.xml' }
    - { src: 'docker_related_config.xml.j2', dest: 'docker_related_config.xml' }
    - { src: 'network.xml.j2', dest: 'network.xml' }
    - { src: 'other_db_customizations.xml.j2', dest: 'other_db_customizations.xml' }
  tags:
    - config

- name: Set ownership and permissions for ClickHouse configuration directory
  file:
    path: "{{ clickhouse_config_dir }}"
    owner: "clickhouse"
    group: "clickhouse"
    recurse: yes
    mode: '0755'
  tags:
    - config

- name: Set ownership and permissions for ClickHouse configuration files
  file:
    path: "{{ item }}"
    owner: "clickhouse"
    group: "clickhouse"
    mode: '0755'
  loop:
    - "{{ clickhouse_config_dir }}/cluster.xml"
    - "{{ clickhouse_config_dir }}/network.xml"
    - "{{ clickhouse_config_dir }}/docker_related_config.xml"
    - "{{ clickhouse_config_dir }}/ssl.xml"
    - "{{ clickhouse_config_dir }}/other_db_customizations.xml"

  tags:
    - config

- name: Download, transfer, and upload Docker image if not present
  block:
    - name: Check if the Docker image exists on the remote host
      shell: docker images -q clickhouse/clickhouse-server:23.10.5.20
      register: image_exists
      changed_when: false

    - name: Check if Docker image tar file exists on the remote host
      stat:
        path: /tmp/clickhouse-server.tar
      register: image_tar_exists

    - name: Pull the Docker image on the local machine if it's not present on the remote host
      docker_image:
        name: clickhouse/clickhouse-server
        tag: 23.10.5.20
        source: pull
      delegate_to: localhost
      when: image_exists.stdout == ""

    - name: Save Docker image to a tar file locally
      command: docker save -o /tmp/clickhouse-server.tar clickhouse/clickhouse-server:23.10.5.20
      delegate_to: localhost
      when: image_exists.stdout == ""

    - name: Transfer the Docker image tar file to the remote host
      copy:
        src: /tmp/clickhouse-server.tar
        dest: /tmp/clickhouse-server.tar
      when: image_exists.stdout == "" and not image_tar_exists.stat.exists

    - name: Load Docker image on the remote host from the tar file
      command: docker load -i /tmp/clickhouse-server.tar
      when: image_exists.stdout == "" and not image_tar_exists.stat.exists

    - name: Ensure the Docker image is present on the remote host
      docker_image:
        name: clickhouse/clickhouse-server
        tag: 23.10.5.20
        source: load
      when: image_exists.stdout == ""
  tags:
    - docker
    - image

- name: remove Clickhouse Container if running
  docker_container:
    name: "{{ clickhouse_container_name }}"
    state: absent
  tags:
    - clickhouse
    - docker
    - remove
    - start2

- name: Verify ClickHouse Docker variables
  block:
    - name: Validate required variables for ClickHouse Docker container
      vars:
        clickhouse_docker_variables:
          - { var_name: "clickhouse_container_name", var_value: "{{ clickhouse_container_name }}", error_message: "clickhouse_container_name is not defined or is empty." }
          - { var_name: "docker_image", var_value: "{{ docker_image }}", error_message: "docker_image is not defined or is empty." }
          - { var_name: "clickhouse_config_dir", var_value: "{{ clickhouse_config_dir }}", error_message: "clickhouse_config_dir is not defined or is empty." }
          - { var_name: "remote_certs_dir", var_value: "{{ remote_certs_dir }}", error_message: "remote_certs_dir is not defined or is empty." }
          - { var_name: "docker_network", var_value: "{{ docker_network }}", error_message: "docker_network is not defined or is empty." }
      fail:
        msg: "{{ item.error_message }}"
      loop: "{{ clickhouse_docker_variables }}"
      when: item.var_value is undefined or item.var_value == ""

    - name: Verify required directories exist on the remote host
      vars:
        required_directories:
          - { path: "{{ clickhouse_config_dir }}", error_message: "clickhouse_config_dir does not exist on the remote host." }
          - { path: "{{ remote_certs_dir }}", error_message: "remote_certs_dir does not exist on the remote host." }
      stat:
        path: "{{ item.path }}"
      register: dir_check
      loop: "{{ required_directories }}"
      failed_when: dir_check.stat.exists == false
      when: item.path != ""
  tags:
    - clickhouse
    - docker
    - debug

- name: Start ClickHouse Docker container with configuration and certificates
  docker_container:
    name: "{{ clickhouse_container_name }}"
    image: "{{ docker_image }}"
    state: started
    # restart_policy: always
    user: clickhouse
    ports:
      - "8123:8123"
      - "8443:8443"
      - "9440:9440"
      - "9000:9000"
      - "9004:9004"
      - "9010:9010"
    volumes:
      - "{{ clickhouse_config_dir }}:{{clickhouse_config_dir}}:ro"
      - "{{ remote_certs_dir }}:{{remote_certs_dir}}:ro"
    env:
      CLICKHOUSE_USER: "clickhouse"
      CLICKHOUSE_PASSWORD: "clickhouse"
    log_driver: "json-file"
    log_options:
      max-size: "10m"
      max-file: "3"
    # networks:
      # - "{{ docker_network }}"
  tags:
    - clickhouse
    - docker
    - start
    - start2
